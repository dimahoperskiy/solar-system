{"version":3,"sources":["static/earth.jpg","components/Earth/Earth.js","components/Earth/three.js","static/sun.jpg","static/mercury.jpg","static/venus.jpg","static/moon.jpg","static/mars.jpg","static/asteroid.jpg","static/jupiter.jpeg","components/SolarSystem/SolarSystem.js","components/SolarSystem/three.js","components/App/App.js","reportWebVitals.js","index.js"],"names":["Earth","useEffect","earthTexture","THREE","load","earthMap","canvas","document","querySelector","scene","geometry","material","map","sphere","add","pointLight","position","x","y","z","wrapper","sizes","width","offsetHeight","height","window","addEventListener","camera","aspect","updateProjectionMatrix","renderer","setSize","setPixelRatio","Math","min","devicePixelRatio","alpha","antialias","mouseX","mouseY","targetX","targetY","windowX","innerWidth","windowY","innerHeight","e","clientX","clientY","scrollY","clock","tick","elapsedTime","getElapsedTime","rotation","render","requestAnimationFrame","init","className","SolarSystem","textureLoader","Planet","radius","name","this","texture","_planet","ringRadius","color","ring","orbits","dist","i","el","Number","console","log","outerRadius","orbit","push","positionAroundSunPrevious","sunTimer","moveAroundSun","group","speed","start","cos","sin","toLowerCase","rotationAroundAxisPrevious","axisTimer","moveAroundAxis","planet","randomNumber","max","random","toFixed","sun","sunMap","mercury","mercuryMap","venus","venusMap","earth","moon","moonMap","mars","marsMap","asteroids","jupiter","jupiterMap","asteroidTexture","asteroidMap","asteroidSize","asteroidShape1","asteroidShape2","asteroidOrbit","asteroidPositionY","asteroid","radians","PI","createOrbits","mercuryOrbit","venusOrbit","earthOrbit","marsOrbit","jupiterOrbit","mercuryRing","createRing","venusRing","earthRing","marsRing","jupiterRing","sunGroup","mercuryGroup","venusGroup","earthGroup","marsGroup","jupiterGroup","zoom","far","controls","OrbitControls","enableDamping","zoomSpeed","logarithmicDepthBuffer","cnt","earthRingRadius","parameters","earthOrbitRadius","mercuryOrbitRadius","venusOrbitRadius","marsOrbitRadius","jupiterOrbitRadius","mercuryToSunDist","astStartX","astEndX","dict","asteroidsStart","asteroidsEnd","table","sunRadius","update","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.d2c4b0d6.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/earth.ca9e8806.jpg\";","import React, {useEffect} from 'react';\nimport {init} from \"./three\";\nimport \"./Earth.css\"\n\nconst Earth = () => {\n    useEffect(() => {\n        init()\n    }, [])\n\n    return (\n        <canvas className=\"canvas\"/>\n    );\n};\n\nexport default Earth;","import * as THREE from 'three'\nimport * as dat from 'dat.gui'\n\nimport earthMap from \"../../static/earth.jpg\"\n\nexport const init = () => {\n    // Debug\n    // const gui = new dat.GUI()\n\n    // Loader\n    const textureLoader = new THREE.TextureLoader()\n\n    const earthTexture = textureLoader.load(earthMap)\n\n\n    // Earth\n    const canvas = document.querySelector('canvas.canvas')\n\n    // Scene\n    const scene = new THREE.Scene()\n\n\n    // Objects\n    // const geometry = new THREE.TorusKnotGeometry(.5, .2, 100, 16, 3, 16);\n    const geometry = new THREE.SphereGeometry( 0.8, 32, 32 );\n\n// Materials\n\n    const material = new THREE.MeshStandardMaterial()\n    // material.color = new THREE.Color(0x4268)\n    // material.roughness = .125\n    // material.metalness = .312\n    // material.normalMap = normalTexture\n    // material.normalMap = earthTexture\n    material.map = earthTexture\n\n    // const materialFolder = gui.addFolder(\"Material\")\n\n    const materialColor = {\n        color: 0x4268\n    }\n\n    // materialFolder.addColor(materialColor, 'color')\n    //     .onChange(() => {\n    //         material.color.set(materialColor.color)\n    //     })\n    //\n    // materialFolder.add(material, \"roughness\").min(0).max(1).step(0.001)\n    // materialFolder.add(material, \"metalness\").min(0).max(1).step(0.001)\n\n\n// Mesh\n    const sphere = new THREE.Mesh(geometry, material)\n    scene.add(sphere)\n\n// Lights\n\n    const pointLight = new THREE.PointLight(0xffffff, 1.92)\n    pointLight.position.x = 4\n    pointLight.position.y = 4.2\n    pointLight.position.z = 2\n    scene.add(pointLight)\n\n    // const lightFolder = gui.addFolder(\"Light\")\n\n    const pointLightColor = {\n        color: 0xffffff\n    }\n\n    // lightFolder.addColor(pointLightColor, 'color')\n    //     .onChange(() => {\n    //         pointLight.color.set(pointLightColor.color)\n    //     })\n    //\n    // lightFolder.add(pointLight.position, \"x\").min(-10).max(10).step(0.01)\n    // lightFolder.add(pointLight.position, \"y\").min(-10).max(10).step(0.01)\n    // lightFolder.add(pointLight.position, \"z\").min(-100).max(100).step(0.1)\n    // lightFolder.add(pointLight, \"intensity\").min(0).max(10).step(0.01)\n\n    /**\n     * Sizes\n     */\n\n    const wrapper = document.querySelector(\".canvas-wrapper\")\n\n    const sizes = {\n        width: wrapper.offsetHeight,\n        height: wrapper.offsetHeight\n    }\n\n    window.addEventListener('resize', () => {\n        // Update sizes\n        sizes.width = wrapper.offsetHeight\n        sizes.height = wrapper.offsetHeight\n\n        // Update camera\n        camera.aspect = sizes.width / sizes.height\n        camera.updateProjectionMatrix()\n\n        // Update renderer\n        renderer.setSize(sizes.width, sizes.height)\n        renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2))\n    })\n\n    /**\n     * Camera\n     */\n// Base camera\n    const camera = new THREE.PerspectiveCamera(75, sizes.width / sizes.height, 0.1, 100)\n    camera.position.x = 0\n    camera.position.y = 0\n    camera.position.z = 1.5\n    scene.add(camera)\n\n    // const cameraFolder = gui.addFolder(\"Camera\")\n\n    // cameraFolder.add(camera.position, \"x\").min(-10).max(10).step(0.01)\n    // cameraFolder.add(camera.position, \"y\").min(-10).max(10).step(0.01)\n    // cameraFolder.add(camera.position, \"z\").min(-10).max(10).step(0.01)\n\n\n\n// Controls\n// const controls = new OrbitControls(camera, canvas)\n// controls.enableDamping = true\n\n    /**\n     * Renderer\n     */\n    const renderer = new THREE.WebGLRenderer({\n        canvas: canvas,\n        alpha: true,\n        antialias: true\n    })\n\n    renderer.setSize(wrapper.offsetHeight, wrapper.offsetHeight)\n    // renderer.setSize(sizes.width, sizes.height)\n    renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2))\n\n    /**\n     * Animate\n     */\n    let mouseX = 0\n    let mouseY = 0\n\n    let targetX = 0\n    let targetY = 0\n\n    const windowX = window.innerWidth / 2\n    const windowY = window.innerHeight / 2\n\n    const onDocumentMouseMove = (e) => {\n        mouseX = e.clientX - windowX\n        mouseY = e.clientY - windowY\n    }\n\n    const onScroll = (e) => {\n        sphere.position.y = window.scrollY * .001\n    }\n\n    document.addEventListener(\"mousemove\", onDocumentMouseMove)\n\n    window.addEventListener(\"scroll\", onScroll)\n\n\n    const clock = new THREE.Clock()\n\n\n    const tick = () => {\n        targetX = .001 * mouseX\n        targetY = .001 * mouseY\n\n        const elapsedTime = clock.getElapsedTime()\n\n\n        // Update objects\n        sphere.rotation.y = .5 * elapsedTime\n\n\n\n        sphere.rotation.y += .5 * (targetX - sphere.rotation.y)\n        sphere.rotation.x += .5 * (targetY - sphere.rotation.x)\n        sphere.position.z = -.3 * (targetX)\n\n\n        // Update Orbital Controls\n        // controls.update()\n\n        // Render\n        renderer.render(scene, camera)\n\n        // Call tick again on the next frame\n        window.requestAnimationFrame(tick)\n    }\n\n    tick()\n\n}\n\n\n","export default __webpack_public_path__ + \"static/media/sun.b34e6ead.jpg\";","export default __webpack_public_path__ + \"static/media/mercury.8f80953b.jpg\";","export default __webpack_public_path__ + \"static/media/venus.b4312567.jpg\";","export default __webpack_public_path__ + \"static/media/moon.7e1ad9ea.jpg\";","export default __webpack_public_path__ + \"static/media/mars.33960f5a.jpg\";","export default __webpack_public_path__ + \"static/media/asteroid.83eccd8b.jpg\";","export default __webpack_public_path__ + \"static/media/jupiter.3e84533e.jpeg\";","import React, {useEffect} from 'react';\nimport {init} from \"./three\";\n\nconst SolarSystem = () => {\n    useEffect(() => {\n        init()\n    })\n\n    return (\n        <canvas className=\"solar\"/>\n    );\n};\n\nexport default SolarSystem;","import * as THREE from 'three'\nimport * as dat from 'dat.gui'\n\n\nimport sunMap from \"../../static/sun.jpg\"\nimport mercuryMap from \"../../static/mercury.jpg\"\nimport venusMap from \"../../static/venus.jpg\"\nimport earthMap from \"../../static/earth.jpg\"\nimport moonMap from \"../../static/moon.jpg\"\nimport marsMap from \"../../static/mars.jpg\"\nimport asteroidMap from \"../../static/asteroid.jpg\"\nimport jupiterMap from \"../../static/jupiter.jpeg\"\n\nimport {OrbitControls} from \"three/examples/jsm/controls/OrbitControls\";\n\nexport const init = () => {\n    // Debug\n    // const gui = new dat.GUI()\n\n    // Loader\n    const textureLoader = new THREE.TextureLoader()\n\n    // Earth\n    const canvas = document.querySelector('canvas.solar')\n\n    // Scene\n    const scene = new THREE.Scene()\n\n    const SIZE_SMALLER = 2\n    const DIST_SMALLER = 8\n    const GIANTS_SMALLER = 5\n    const TIME_SLOW = 20\n\n\n    // Objects\n    // const geometry = new THREE.TorusKnotGeometry(.5, .2, 100, 16, 3, 16);\n    class Planet {\n        constructor(map, radius, name) {\n            this.map = map\n            this.radius = radius / SIZE_SMALLER\n            this.name = name\n\n            const texture = textureLoader.load(map)\n            const geometry = new THREE.SphereGeometry(this.radius, 32, 32)\n            let material\n            if (name === \"Sun\") material = new THREE.MeshBasicMaterial({map: texture})\n            else material = new THREE.MeshStandardMaterial({map: texture})\n\n            this._planet = new THREE.Mesh(geometry, material)\n            this._planet.name = name\n        }\n\n        get planet() {\n            return this._planet\n        }\n\n        createRing() {\n            const ringRadius = this.radius * 3\n            const geometry = new THREE.RingGeometry(ringRadius, ringRadius + .05 / SIZE_SMALLER / 10, 64)\n            const material = new THREE.MeshBasicMaterial()\n            material.color = new THREE.Color(0x59de3)\n            this.ring = new THREE.Mesh(geometry, material)\n            this.ring.rotation.x = 4.75\n\n            return this.ring\n        }\n\n        createOrbits() {\n            const orbits = []\n            // const dist = [this.radius + 5.8,\n            //     this.radius + 10.8,\n            //     this.radius + 15,\n            //     this.radius + 22.8,\n            //     this.radius + 32.9]\n            // let dist = [this.radius + 5.8, // mercury\n            //     this.radius + 10.8, // venus\n            //     this.radius + 15, // earth\n            //     this.radius + 22.8, // mars\n            //     this.radius + 77.8 // jupiter\n            // ]\n            let dist = []\n            dist[0] = 20\n            dist[1] = 108 * dist[0] / 58\n            dist[2] = 150 * dist[1] / 108\n            dist[3] = 228 * dist[2] / 150\n            dist[4] = 778 * dist[3] / 228\n\n            // debugger\n            // let dist = [5.8 + this.radius, 10.8, 15, 22.8, 77.8]\n            dist = dist.map(el => (Number(el)) / DIST_SMALLER)\n            console.log(dist)\n            console.log(this.radius)\n            for (let i in dist) {\n                // const ringRadius = this.radius * i + 2\n                const ringRadius = dist[i]\n                let outerRadius = ringRadius + .05 / SIZE_SMALLER / 10\n                // if (Number(i) === 4) outerRadius = ringRadius + 25.2 / DIST_SMALLER\n                const geometry = new THREE.RingGeometry(ringRadius, outerRadius, 64)\n                const material = new THREE.MeshBasicMaterial()\n                material.color = new THREE.Color(0x59de3)\n                let orbit = new THREE.Mesh(geometry, material)\n                orbit.rotation.x = 4.75\n                orbits.push(orbit)\n            }\n            return orbits\n        }\n    }\n    //\n    // const createFolder = (group) => {\n    //     const folder = gui.addFolder(group.name)\n    //     folder.add(group.position, \"x\").min(-20).max(20).step(0.01)\n    //     folder.add(group.position, \"y\").min(-20).max(20).step(0.01)\n    //     folder.add(group.position, \"z\").min(-20).max(20).step(0.01)\n    // }\n\n    let positionAroundSunPrevious = {}\n    let sunTimer = new THREE.Clock()\n    let timeAroundSun = {\n        mercury: sunTimer.getElapsedTime(),\n        venus: sunTimer.getElapsedTime(),\n        earth: sunTimer.getElapsedTime(),\n        moon: sunTimer.getElapsedTime(),\n        mars: sunTimer.getElapsedTime(),\n    }\n\n\n    let EARTH_DAY\n\n\n    const moveAroundSun = (group, radius, elapsedTime, speed, start) => {\n        const slowAll = 122 * TIME_SLOW\n\n        group.position.x = -Math.cos(start + elapsedTime * speed / slowAll) * radius\n        group.position.z = Math.sin(start + elapsedTime * speed / slowAll) * radius\n\n        // if (positionAroundSunPrevious[group.name.toLowerCase()] < 0 && group.position.x > 0) {\n        //     console.log(group.name + \" made a lap in \" + Math.round((sunTimer.getElapsedTime() - timeAroundSun[group.name.toLowerCase()]) / EARTH_DAY) + \" Earth days\")\n        //     timeAroundSun[group.name.toLowerCase()] = sunTimer.getElapsedTime()\n        // }\n        positionAroundSunPrevious[group.name.toLowerCase()] = group.position.x\n    }\n\n    let rotationAroundAxisPrevious = {}\n    let radian = 6.2831853\n    let axisTimer = new THREE.Clock()\n    let timeAroundAxis = {\n        sun: axisTimer.getElapsedTime(),\n        mercury: axisTimer.getElapsedTime(),\n        venus: axisTimer.getElapsedTime(),\n        earth: axisTimer.getElapsedTime(),\n        moon: axisTimer.getElapsedTime(),\n        mars: axisTimer.getElapsedTime(),\n        asteroids: axisTimer.getElapsedTime()\n    }\n\n    const moveAroundAxis = (planet, speed, elapsedTime) => {\n        const slowAll = 3 * TIME_SLOW\n\n        planet.rotation.y = speed * elapsedTime / slowAll\n\n        // if (rotationAroundAxisPrevious[planet.name.toLowerCase()] % radian > 2 && planet.rotation.y % radian < 2) {\n        //     if (planet.name === \"Earth\") {\n        //         EARTH_DAY = (axisTimer.getElapsedTime() - timeAroundAxis.earth)\n        //     }\n        //     console.log(planet.name + \" spun in \" + Math.round((axisTimer.getElapsedTime() - timeAroundAxis[planet.name.toLowerCase()]) / EARTH_DAY) + \" Earth days\")\n        //     timeAroundAxis[planet.name.toLowerCase()] = axisTimer.getElapsedTime()\n        // }\n        rotationAroundAxisPrevious[planet.name.toLowerCase()] = planet.rotation.y\n    }\n\n    const randomNumber = (min, max) => {\n        return Number(Math.random() * (max - min) + min).toFixed(4)\n    }\n\n    // window.random = randomNumber\n\n\n    const sun = new Planet(sunMap, 8.33 / GIANTS_SMALLER, \"Sun\")\n    // const sun = new Planet(sunMap, 8.33, \"Sun\")\n    const mercury = new Planet(mercuryMap, 0.167, \"Mercury\")\n    const venus = new Planet(venusMap, 0.475, \"Venus\")\n    const earth = new Planet(earthMap, 0.5, \"Earth\")\n    const moon = new Planet(moonMap, 0.135, \"Moon\")\n    const mars = new Planet(marsMap, 0.25, \"Mars\")\n    const asteroids = new THREE.Object3D()\n    asteroids.name = \"Asteroids\"\n    const jupiter = new Planet(jupiterMap, 5.6, \"Jupiter\")\n\n    const asteroidTexture = textureLoader.load(asteroidMap)\n    for (let i = 0; i < 1000; i++) {\n        let asteroidSize = randomNumber(0.012, 0.042) / SIZE_SMALLER,\n            asteroidShape1 = randomNumber(4, 10),\n            asteroidShape2 = randomNumber(4, 10),\n            asteroidOrbit = randomNumber(150, 200) / DIST_SMALLER,\n            asteroidPositionY = randomNumber(-2, 2) / SIZE_SMALLER;\n\n        let material = new THREE.MeshLambertMaterial()\n        material.map = asteroidTexture\n\n        let asteroid = new THREE.Mesh( new THREE.SphereGeometry(asteroidSize, asteroidShape1, asteroidShape2),  material);\n\n        asteroid.position.y = asteroidPositionY;\n        let radians = randomNumber(0, 360) * Math.PI / 180;\n        asteroid.position.x = Math.cos(radians) * asteroidOrbit;\n        asteroid.position.z = Math.sin(radians) * asteroidOrbit;\n\n        asteroids.add(asteroid);\n    }\n\n\n\n\n    const [mercuryOrbit, venusOrbit, earthOrbit, marsOrbit, jupiterOrbit] = sun.createOrbits()\n\n    const mercuryRing = mercury.createRing()\n    const venusRing = venus.createRing()\n    const earthRing = earth.createRing()\n    const marsRing = mars.createRing()\n    const jupiterRing = jupiter.createRing()\n\n// earthRing.rotation.x = 4.846\n//     moon.planet.position.x = 0.7\n\n// sun.planet.position.z = -25\n\n    const sunGroup = new THREE.Group()\n    sunGroup.name = \"Sun\"\n    sunGroup.add(sun.planet)\n    sunGroup.add(mercuryOrbit)\n    sunGroup.add(venusOrbit)\n    sunGroup.add(earthOrbit)\n    sunGroup.add(marsOrbit)\n    sunGroup.add(jupiterOrbit)\n\n    const mercuryGroup = new THREE.Group()\n    mercuryGroup.name = \"Mercury\"\n    mercuryGroup.add(mercury.planet)\n    mercuryGroup.add(mercuryRing)\n\n    const venusGroup = new THREE.Group()\n    venusGroup.name = \"Venus\"\n    venusGroup.add(venus.planet)\n    venusGroup.add(venusRing)\n\n    const earthGroup = new THREE.Group()\n    earthGroup.name = \"Earth\"\n    earthGroup.add(earth.planet)\n    earthGroup.add(earthRing)\n    earthGroup.add(moon.planet)\n\n    const marsGroup = new THREE.Group()\n    marsGroup.name = \"Mars\"\n    marsGroup.add(mars.planet)\n    marsGroup.add(marsRing)\n\n    const jupiterGroup = new THREE.Group()\n    jupiterGroup.name = \"Jupiter\"\n    jupiterGroup.add(jupiter.planet)\n    jupiterGroup.add(jupiterRing)\n\n    scene.add(sunGroup)\n    scene.add(mercuryGroup)\n    scene.add(venusGroup)\n    scene.add(earthGroup)\n    scene.add(marsGroup)\n    scene.add(asteroids)\n    scene.add(jupiterGroup)\n\n    // createFolder(mercuryGroup)\n    // createFolder(venusGroup)\n    // createFolder(earthGroup)\n    // createFolder(marsGroup)\n    // createFolder(jupiterGroup)\n\n// Lights\n\n    const pointLight = new THREE.PointLight(0xffffff, 3.3)\n    pointLight.position.x = 0\n    pointLight.position.y = 0\n    pointLight.position.z = 0\n    scene.add(pointLight)\n\n    /**\n     * Sizes\n     */\n\n    const wrapper = document.querySelector(\".canvas-wrapper\")\n\n    const sizes = {\n        width: window.innerWidth,\n        height: window.innerHeight\n    }\n\n    window.addEventListener('resize', () => {\n        // Update sizes\n        sizes.width = window.innerWidth\n        sizes.height = window.innerHeight\n\n        // Update camera\n        camera.aspect = sizes.width / sizes.height\n        camera.updateProjectionMatrix()\n\n        // Update renderer\n        renderer.setSize(sizes.width, sizes.height)\n        renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2))\n    })\n\n    /**\n     * Camera\n     */\n// Base camera\n    const camera = new THREE.PerspectiveCamera(75, sizes.width / sizes.height, 0.1, 100)\n    camera.position.x = 0\n    camera.position.y = 9\n    camera.position.z = 10\n    camera.zoom = 2\n    camera.far = 1000\n    scene.add(camera)\n\n    console.log(camera)\n\n\n\n\n    // const cameraFolder = gui.addFolder(\"Camera\")\n    //\n    // cameraFolder.add(camera.position, \"x\").min(-10).max(30).step(0.01)\n    // cameraFolder.add(camera.position, \"y\").min(-10).max(30).step(0.01)\n    // cameraFolder.add(camera.position, \"z\").min(0).max(100).step(0.01)\n\n\n// Controls\n    const controls = new OrbitControls(camera, canvas)\n    controls.enableDamping = true\n    controls.zoomSpeed = 0.25\n\n    /**\n     * Renderer\n     */\n    const renderer = new THREE.WebGLRenderer({\n        canvas: canvas,\n        alpha: true,\n        // antialias: true,\n        logarithmicDepthBuffer: true\n    })\n\n    renderer.setSize(wrapper.offsetHeight, wrapper.offsetHeight)\n    renderer.setSize(sizes.width, sizes.height)\n    renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2))\n\n    /**\n     * Animate\n     */\n\n    const clock = new THREE.Clock()\n    let cnt = 0\n\n\n    const tick = () => {\n\n\n        const elapsedTime = clock.getElapsedTime()\n\n        // Update objects\n        moveAroundAxis(sun.planet, 19, elapsedTime)\n        moveAroundAxis(mercury.planet, 8, elapsedTime)\n        moveAroundAxis(venus.planet, 1.9, elapsedTime)\n        moveAroundAxis(earth.planet, 465, elapsedTime)\n        moveAroundAxis(moon.planet, -17.2, elapsedTime)\n        moveAroundAxis(mars.planet, 455.3, elapsedTime)\n        moveAroundAxis(asteroids, 0.27, elapsedTime)\n        moveAroundAxis(jupiter.planet, 193.8, elapsedTime)\n\n        let earthRingRadius = earthRing.geometry.parameters.outerRadius\n        let earthOrbitRadius = earthOrbit.geometry.parameters.outerRadius\n        let mercuryOrbitRadius = mercuryOrbit.geometry.parameters.outerRadius\n        let venusOrbitRadius = venusOrbit.geometry.parameters.outerRadius\n        let marsOrbitRadius = marsOrbit.geometry.parameters.outerRadius\n        let jupiterOrbitRadius = jupiterOrbit.geometry.parameters.outerRadius\n\n\n        // if (cnt === 0) {\n        //     moveAroundSun(moon.planet, earthRingRadius, elapsedTime, 714, 2)\n        //     moveAroundSun(mercuryGroup, mercuryOrbitRadius, elapsedTime, 214, 5)\n        //     moveAroundSun(venusGroup, venusOrbitRadius, elapsedTime, 85, 10)\n        //     moveAroundSun(earthGroup, earthOrbitRadius, elapsedTime, 48, 3)\n        //     moveAroundSun(marsGroup, marsOrbitRadius, elapsedTime, 25.53, 7)\n        //     cnt++\n        // }\n        if (cnt === 0) {\n            moveAroundSun(moon.planet, earthRingRadius, elapsedTime, 714, 0)\n            moveAroundSun(mercuryGroup, mercuryOrbitRadius, elapsedTime, 214, 0)\n            moveAroundSun(venusGroup, venusOrbitRadius, elapsedTime, 85, 0)\n            moveAroundSun(earthGroup, earthOrbitRadius, elapsedTime, 48, 0)\n            moveAroundSun(marsGroup, marsOrbitRadius, elapsedTime, 25.53, 0)\n            moveAroundSun(jupiterGroup, jupiterOrbitRadius, elapsedTime, 25.53, 0)\n\n            cnt++\n\n            let mercuryToSunDist = mercuryGroup.position.x - sun.radius\n\n\n            console.log(778 * mercuryToSunDist / 58)\n\n            let astStartX = 328 * mercuryToSunDist / 58\n            let astEndX = 478 * mercuryToSunDist / 58\n\n            // 58 = mercuryToSunDist\n            // 108 =\n\n\n            let dict = {\n                mercury: 58,\n                venus: 58 * (venusGroup.position.x / mercuryToSunDist),\n                earth: 58 * earthGroup.position.x / mercuryToSunDist,\n                mars: 58 * marsGroup.position.x / mercuryToSunDist,\n                asteroidsStart: 58 * (-astStartX) / mercuryToSunDist,\n                asteroidsEnd: 58 * (-astEndX) / mercuryToSunDist,\n                jupiter: 58 * jupiterGroup.position.x / mercuryToSunDist,\n            }\n\n\n            console.table(dict)\n\n\n\n            console.table({\n                sun: sunGroup.position.x,\n                sunRadius: sun.radius,\n                mercury: mercuryGroup.position.x,\n                venus: venusGroup.position.x,\n                earth: earthGroup.position.x,\n                mars: marsGroup.position.x,\n                asteroidsStart: astStartX,\n                asteroidsEnd: astEndX,\n                jupiter: jupiterGroup.position.x,\n            })\n        }\n        moveAroundSun(moon.planet, earthRingRadius, elapsedTime, 714, 2)\n        moveAroundSun(mercuryGroup, mercuryOrbitRadius, elapsedTime, 209, 5)\n        moveAroundSun(venusGroup, venusOrbitRadius, elapsedTime, 82, 10)\n        moveAroundSun(earthGroup, earthOrbitRadius, elapsedTime, 48, 3)\n        moveAroundSun(marsGroup, marsOrbitRadius, elapsedTime, 25.53, 7)\n\n \n        // Update Orbital Controls\n        controls.update()\n\n\n        // Render\n        renderer.render(scene, camera)\n\n        // Call tick again on the next frame\n        window.requestAnimationFrame(tick)\n    }\n\n    tick()\n\n}\n\n\n","import './App.css';\nimport Earth from \"../Earth/Earth\";\nimport SolarSystem from \"../SolarSystem/SolarSystem\";\n\nconst App = () => {\n    return (\n        <div className=\"app\">\n            {/*<h1 className=\"label\">Welcome to the Universe!</h1>*/}\n            <div className=\"canvas-wrapper\">\n                <h1 className=\"label\">Welcome to the Solar System!</h1>\n                <Earth/>\n            </div>\n\n            <section>\n                <SolarSystem/>\n            </section>\n        </div>\n    )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}